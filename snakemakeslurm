#!/bin/bash -l

function help {
    echo "snakemakeslurm - submit snakemake pipeline with slurm"
    echo ""
    echo "usage: snakemakeslurm [-h] [--clean-scratch]"
    echo ""
    echo "The snakemake job is submitted when no argument was used."
    echo ""
    echo "optionals:"
    echo "-h, --help                show this help message and exit"
    echo "-c, --clean-scratch       clean scratch temprary files in each node and exit"
}

function clean_scratch {
    if [ !"$(ls -A )" ]
    then
        echo "no scratch usage record found"
        exit 0
    fi
    echo 'cleaning scratches...'
    for job in $(ls slurm_job_status)
    do
        hostname=$(cat slurm_job_status/$job)
        echo "$hostname $job"
        ssh $hostname rm -rf /scratch/$job
    done
    rm slurm_job_status/*
}

function main {
    SM_PARAMS="job-name partition mail-user mail-type output error time nodes mem exclude"
    SM_ARGS="--ntasks {threads} --mem-per-cpu {cluster.mem-per-cpu}"
    for P in ${SM_PARAMS}
    do
        SM_ARGS="$SM_ARGS --$P {cluster.$P}"
    done

    [[ "$USER_EMAIL" -eq "" ]] && USER_EMAIL="null"

    mkdir -p slurmout

    srun \
            -N 1 -n 1 -t 5-0 --mail-user $USER_EMAIL --mail-type ALL \
            -o slurmout/snakemake_%A.log -e slurmout/snakemake_%A.err \
        snakemake \
            $* \
            -j 999 \
            --latency-wait 30 \
            --cluster-config $(dirname $0)/slurm_config.yml \
            --cluster "sbatch $SM_ARGS" \
        &
}

# parse arguments
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -h|--help) help; exit ;;
        -c|--clean-scratch) clean_scratch; exit ;;
        -*|--*) echo "unknown option: $1" >&2; help; exit 1 ;;
    esac
done

# run snakemake
main